#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import json
import atexit
from pathlib import Path
from typing import Optional

from aiogram import exceptions
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, WebAppInfo,
    InlineKeyboardMarkup, InlineKeyboardButton
)

import logging
logging.basicConfig(level=logging.INFO)

# ========== CONFIG ==========
from config import BOT_TOKEN, WEBAPP_URL, INITIAL_ADMIN  # config.py must provide these keys

DATA_FILE = Path("data.json")

# ========== GLOBAL DATA (in-memory) ==========
DATA = None
DATA_DIRTY = False

# ========== DATA LAYER ==========
def load_data():
    """
    Load data once into global DATA. If file missing or corrupt, create defaults.
    """
    global DATA, INITIAL_ADMIN
    if DATA is None:
        if DATA_FILE.exists():
            try:
                with open(DATA_FILE, "r", encoding="utf-8") as f:
                    DATA = json.load(f)
            except Exception:
                DATA = {}
        else:
            DATA = {}

        # ensure required keys
        DATA.setdefault("orders", {})      # { "user_id": [order,...], ... }
        DATA.setdefault("admins", INITIAL_ADMIN if isinstance(INITIAL_ADMIN, list) else [INITIAL_ADMIN])
        DATA.setdefault("users", {})       # { "user_id": "Name" }
        DATA.setdefault("orders_open", False)
        DATA.setdefault("auth_password", None)   # shared password (string) or None
        DATA.setdefault("blacklist", [])        # list of user ids (ints) blocked
        DATA.setdefault("attempts", {})         # per-user attempt counters { "user_id": n }
    return DATA

def mark_dirty():
    global DATA_DIRTY
    DATA_DIRTY = True

def save_data(force: bool = False):
    """
    Save global DATA to disk only if dirty or force=True.
    """
    global DATA, DATA_DIRTY
    if DATA is None:
        return
    if DATA_DIRTY or force:
        try:
            with open(DATA_FILE, "w", encoding="utf-8") as f:
                json.dump(DATA, f, ensure_ascii=False, indent=2)
            DATA_DIRTY = False
            logging.info("Data saved to %s", DATA_FILE)
        except Exception as e:
            logging.exception("Error saving data: %s", e)

async def autosave_loop():
    """
    Background task to periodically save data.
    """
    while True:
        await asyncio.sleep(300)  # 5 minutes
        save_data()

atexit.register(lambda: save_data(force=True))

# Helper functions that operate on DATA and call mark_dirty when mutating
def is_admin(user_id: int) -> bool:
    data = load_data()
    return user_id in data.get("admins", [])

def add_admin(user_id: int):
    data = load_data()
    if user_id not in data["admins"]:
        data["admins"].append(user_id)
        mark_dirty()

def del_admin(user_id: int):
    data = load_data()
    if user_id in data["admins"]:
        data["admins"].remove(user_id)
        mark_dirty()

def set_username(user_id: int, name: str):
    data = load_data()
    data["users"][str(user_id)] = name
    mark_dirty()

def get_username(user_id: int) -> str:
    data = load_data()
    return data["users"].get(str(user_id), str(user_id))

def set_collection_state(state: bool):
    data = load_data()
    data["orders_open"] = bool(state)
    mark_dirty()

def is_collecting() -> bool:
    return load_data().get("orders_open", False)

def add_order(user_id: int, order: dict):
    data = load_data()
    order.setdefault("done", False)
    order["current"] = bool(is_collecting())
    data["orders"].setdefault(str(user_id), []).append(order)
    mark_dirty()

def get_user_orders_all(user_id: int) -> list:
    data = load_data()
    return data["orders"].get(str(user_id), [])

def update_order(user_id: int, idx: int, order: dict):
    data = load_data()
    arr = data["orders"].get(str(user_id), [])
    if 0 <= idx < len(arr):
        arr[idx] = order
        mark_dirty()

def remove_order(user_id: int, idx: int):
    data = load_data()
    arr = data["orders"].get(str(user_id), [])
    if 0 <= idx < len(arr):
        arr.pop(idx)
        mark_dirty()

def remove_user(user_id: int):
    data = load_data()
    data["users"].pop(str(user_id), None)
    data["orders"].pop(str(user_id), None)
    if user_id in data["admins"]:
        data["admins"].remove(user_id)
    mark_dirty()

def get_all_orders_dict():
    return load_data().get("orders", {})

# ===== password & blacklist helpers =====
def get_auth_password() -> Optional[str]:
    return load_data().get("auth_password")

def set_auth_password(pwd: Optional[str]):
    data = load_data()
    data["auth_password"] = pwd
    mark_dirty()

def is_blacklisted(user_id: int) -> bool:
    data = load_data()
    return int(user_id) in data.get("blacklist", [])

def add_to_blacklist(user_id: int):
    data = load_data()
    if int(user_id) not in data.get("blacklist", []):
        data["blacklist"].append(int(user_id))
        mark_dirty()

def remove_from_blacklist(user_id: int):
    data = load_data()
    if int(user_id) in data.get("blacklist", []):
        data["blacklist"].remove(int(user_id))
        mark_dirty()

def get_attempts(user_id: int) -> int:
    data = load_data()
    return int(data.get("attempts", {}).get(str(user_id), 0))

def inc_attempts(user_id: int) -> int:
    data = load_data()
    attempts = data.setdefault("attempts", {})
    cur = int(attempts.get(str(user_id), 0))
    cur += 1
    attempts[str(user_id)] = cur
    mark_dirty()
    return cur

def reset_attempts(user_id: int):
    data = load_data()
    attempts = data.setdefault("attempts", {})
    if str(user_id) in attempts:
        attempts.pop(str(user_id))
        mark_dirty()

async def broadcast_to_all_users(bot: Bot, text: str):
    data = load_data()
    users = list(data.get("users", {}).keys())
    for uid_str in users:
        try:
            await bot.send_message(int(uid_str), text, disable_web_page_preview=True)
        except Exception:
            # ignore delivery errors
            continue

# ========== BOT SETUP ==========
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ========== FSM ==========
class UserRegistration(StatesGroup):
    waiting_for_name = State()
    waiting_for_password = State()

# ========== Keyboards ==========
def get_main_keyboard_for(user_id: Optional[int] = None) -> ReplyKeyboardMarkup:
    base = [
        [KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é üçî", web_app=WebAppInfo(url=WEBAPP_URL))],
        [KeyboardButton(text="–ú–æ–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="–ú–æ–∏ –ø—Ä–æ—à–ª—ã–µ –∑–∞–∫–∞–∑—ã")],
    ]
    if user_id is not None and is_admin(user_id):
        # show only one start/stop admin button depending on state
        if is_collecting():
            base.append([KeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤ (–∞–¥–º–∏–Ω)")])
        else:
            base.append([KeyboardButton(text="–ù–∞—á–∞—Ç—å —Å–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤ (–∞–¥–º–∏–Ω)")])
        base.append([KeyboardButton(text="–í—Å–µ –∑–∞–∫–∞–∑—ã (–∞–¥–º–∏–Ω)")])
    return ReplyKeyboardMarkup(keyboard=base, resize_keyboard=True)

# ========== START HANDLER ==========
@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    data = load_data()
    uid = message.from_user.id

    # blacklist check
    if is_blacklisted(uid):
        await message.answer("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if str(uid) not in data["users"]:
        # new user ‚Äî ask name
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –∏–º—è:")
        await state.set_state(UserRegistration.waiting_for_name)
        return
    name = data["users"].get(str(uid))
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard_for(uid))

@dp.message(UserRegistration.waiting_for_name)
async def name_handler(message: types.Message, state: FSMContext):
    name = message.text.strip()
    uid = message.from_user.id

    # if user is blacklisted, block
    if is_blacklisted(uid):
        await message.answer("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.clear()
        return

    if is_admin(uid):
        set_username(uid, name)
        await message.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {name}!", reply_markup=get_main_keyboard_for(uid))
        await state.clear()
    else:
        # store temporary name in state and ask password
        await state.update_data(candidate_name=name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—É –≤–∞—Å 3 –ø–æ–ø—ã—Ç–∫–∏):")
        await state.set_state(UserRegistration.waiting_for_password)

@dp.message(UserRegistration.waiting_for_password)
async def password_handler(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    data_state = await state.get_data()
    name = data_state.get("candidate_name", message.from_user.full_name or str(uid))
    entered = message.text.strip()

    # get current auth password
    pwd = get_auth_password()
    if pwd is None:
        # no password set by admin -> deny registration (or allow auto? here deny)
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ ‚Äî –ø–∞—Ä–æ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.clear()
        return

    if entered == pwd:
        # success
        set_username(uid, name)
        reset_attempts(uid)
        await message.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!", reply_markup=get_main_keyboard_for(uid))
        await state.clear()
    else:
        # fail
        attempts = inc_attempts(uid)
        remaining = max(0, 3 - attempts)
        if attempts >= 3:
            add_to_blacklist(uid)
            await message.answer("‚õî –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
            await state.clear()
        else:
            await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# ========== ORDER TEXT / SENDER ==========
def make_order_text(uid: int, idx: int, order: dict) -> str:
    name = get_username(uid)
    status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω" if order.get("done") else ("‚è≥ –¢–µ–∫—É—â–∏–π" if order.get("current") else "üì¶ –ü—Ä–æ—à–ª—ã–π")
    title = order.get("title", "")
    price = order.get("price", "")
    link = order.get("link", "")
    text = (
        f"<b>{name}</b> ‚Äî –∑–∞–∫–∞–∑ #{idx+1}:\n"
        f"{title} - <b>{price} ‚ÇΩ</b>\n"
        f"–°—Å—ã–ª–∫–∞: {link}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}"
    )
    return text

async def send_order_message(uid: int, idx: int, to_user: Optional[int] = None):
    """
    Send a single order message for absolute index idx in user's list.
    If to_user is None => send to owner (uid). If to_user provided and is admin => send to that admin.
    """
    orders = get_user_orders_all(uid)
    if not (0 <= idx < len(orders)):
        return
    order = orders[idx]
    text = make_order_text(uid, idx, order)

    if order.get("current", False):
        # current: owner may cancel, admin may mark done (we'll show both buttons; handler will check permissions)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data=f"cancel_{uid}_{idx}"),
            # InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ", callback_data=f"done_{uid}_{idx}")
            ]
        ])
    else:
        # past: owner can delete
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å ‚ùå", callback_data=f"deletepast_{uid}_{idx}")]
        ])

    target = uid if to_user is None else to_user
    try:
        await bot.send_message(int(target), text, reply_markup=keyboard, disable_web_page_preview=True, parse_mode="HTML")
    except Exception:
        pass

# ========== WEBAPP HANDLER ==========
@dp.message(lambda m: m.web_app_data is not None)
async def webapp_data_handler(message: types.Message):
    uid = message.from_user.id

    # ensure registered
    if str(uid) not in load_data().get("users", {}):
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.", disable_web_page_preview=True)
        return

    # check collecting flag
    if not is_collecting():
        await message.answer(
            "‚õî –°–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤ —Å–µ–π—á–∞—Å –∑–∞–∫—Ä—ã—Ç. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –Ω–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –≤ –±–æ—Ç–µ.",
            disable_web_page_preview=True
        )
        return

    try:
        data = json.loads(message.web_app_data.data)
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp. –ó–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏–Ω—è—Ç.", disable_web_page_preview=True)
        return

    order = {
        "title": data.get("title", ""),
        "price": data.get("price", ""),
        "link": data.get("link", ""),
        "done": False
    }

    add_order(uid, order)
    all_orders = get_user_orders_all(uid)
    idx = len(all_orders) - 1
    # send owner the created order message
    await send_order_message(uid, idx)
    await message.answer("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", disable_web_page_preview=True)

# ========== USER VIEWS ==========

@dp.message(Command("my_current"))
@dp.message(F.text == "–ú–æ–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã")
async def my_current_handler(message: types.Message):
    uid = message.from_user.id
    arr = get_user_orders_all(uid)
    current_indices = [i for i, o in enumerate(arr) if o.get("current", False)]
    if not current_indices:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=get_main_keyboard_for(uid))
        return
    for idx in current_indices:
        await send_order_message(uid, idx)

@dp.message(Command("my_past"))
@dp.message(F.text == "–ú–æ–∏ –ø—Ä–æ—à–ª—ã–µ –∑–∞–∫–∞–∑—ã")
async def my_past_handler(message: types.Message):
    uid = message.from_user.id
    arr = get_user_orders_all(uid)
    past_indices = [i for i, o in enumerate(arr) if not o.get("current", True)]
    if not past_indices:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—à–ª—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=get_main_keyboard_for(uid))
        return
    for idx in past_indices:
        await send_order_message(uid, idx)

# ========== ADMIN: start/close collection & all current orders ==========
@dp.message(Command("start_collection"))
@dp.message(F.text == "–ù–∞—á–∞—Ç—å —Å–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤ (–∞–¥–º–∏–Ω)")
async def start_collection_handler(message: types.Message):
    uid = message.from_user.id
    if not is_admin(uid):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    data = load_data()
    # mark existing orders as past
    for uid_str, orders in data.get("orders", {}).items():
        for order in orders:
            order["current"] = False
    data["orders_open"] = True
    mark_dirty()

    await broadcast_to_all_users(bot, "üéâ –°–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤ –æ—Ç–∫—Ä—ã—Ç! –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã.")
    await message.answer("–°–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤ –æ—Ç–∫—Ä—ã—Ç –∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.", reply_markup=get_main_keyboard_for(uid))

@dp.message(Command("close_collection"))
@dp.message(F.text == "–ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤ (–∞–¥–º–∏–Ω)")
async def close_collection_handler(message: types.Message):
    uid = message.from_user.id
    if not is_admin(uid):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    set_collection_state(False)
    await broadcast_to_all_users(bot, "‚õî –°–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤ –∑–∞–∫—Ä—ã—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫–∏.")
    await message.answer("–°–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤ –∑–∞–∫—Ä—ã—Ç –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", reply_markup=get_main_keyboard_for(uid))

@dp.message(Command("all_orders"))
@dp.message(F.text == "–í—Å–µ –∑–∞–∫–∞–∑—ã (–∞–¥–º–∏–Ω)")
async def all_orders_handler(message: types.Message):
    uid = message.from_user.id
    if not is_admin(uid):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    all_orders = get_all_orders_dict()
    any_current = False
    for uid_str, orders in all_orders.items():
        user_total = 0

        for idx, order in enumerate(orders):
            if not order.get("current", False):
                continue
            any_current = True

            text = make_order_text(int(uid_str), idx, order)
            user_total += int(order.get("price", 0))

            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            if not order.get("done"):
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º ‚úÖ", callback_data=f"done_{uid_str}_{idx}")]
                ])
            await message.answer(text, reply_markup=keyboard, disable_web_page_preview=True, parse_mode="HTML")

        if user_total > 0:
            await message.answer(f"üí∞ <b>–ò—Ç–æ–≥–æ –¥–ª—è {get_username(int(uid_str))}: {user_total} ‚ÇΩ</b>\n", parse_mode="HTML")

    if not any_current:
        await message.answer("–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=get_main_keyboard_for(uid))

# ========== CALLBACKS ==========
@dp.callback_query()
async def cb_handler(callback: types.CallbackQuery):
    data = callback.data or ""
    parts = data.split("_")
    if len(parts) < 3:
        await callback.answer()
        return

    action = parts[0]
    try:
        uid = int(parts[1])
        idx = int(parts[2])
    except Exception:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    orders = get_user_orders_all(uid)
    if not (0 <= idx < len(orders)):
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    order = orders[idx]

    # Cancel: owner or admin
    if action == "cancel":
        requester = callback.from_user.id
        if requester != uid and not is_admin(requester):
            await callback.answer("–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å —á—É–∂–æ–π –∑–∞–∫–∞–∑", show_alert=True)
            return
        if order.get("done"):
            await callback.answer("–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑", show_alert=True)
            return
        remove_order(uid, idx)
        await callback.message.edit_text(f"{get_username(uid)} ‚Äî –∑–∞–∫–∞–∑ #{idx+1} –æ—Ç–º–µ–Ω—ë–Ω ‚úÖ")
        await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω")

    # Done: admin only
    elif action == "done":
        requester = callback.from_user.id
        if not is_admin(requester):
            await callback.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–º–µ—á–∞—Ç—å –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º", show_alert=True)
            return
        order["done"] = True
        update_order(uid, idx, order)
        await callback.message.edit_text(f"{get_username(uid)} ‚Äî –∑–∞–∫–∞–∑ #{idx+1} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π ‚úÖ")
        await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")

    # delete past: owner only
    elif action == "deletepast":
        requester = callback.from_user.id
        if requester != uid:
            await callback.answer("–ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å —á—É–∂—É—é –∑–∞–ø–∏—Å—å", show_alert=True)
            return
        if order.get("current", True):
            await callback.answer("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑", show_alert=True)
            return
        remove_order(uid, idx)
        await callback.message.edit_text(f"{get_username(uid)} ‚Äî –ø—Ä–æ—à–ª—ã–π –∑–∞–∫–∞–∑ #{idx+1} —É–¥–∞–ª—ë–Ω ‚ùå")
        await callback.answer("–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω")

    else:
        await callback.answer()

# ========== ADMIN UTILITIES ==========
@dp.message(Command("add_admin"))
async def add_admin_cmd(message: types.Message):
    caller = message.from_user.id
    if not is_admin(caller):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <user_id>")
        return
    try:
        new_id = int(parts[1])
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π user_id")
        return
    add_admin(new_id)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.")

@dp.message(Command("del_admin"))
async def del_admin_cmd(message: types.Message):
    caller = message.from_user.id
    if not is_admin(caller):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤.")
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del_admin <user_id>")
        return
    try:
        target = int(parts[1])
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π user_id")
        return
    if target == caller:
        await message.answer("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ –∞–¥–º–∏–Ω–æ–≤.")
        return
    del_admin(target)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤ (–µ—Å–ª–∏ –±—ã–ª).")

@dp.message(Command("del_user"))
async def del_user_cmd(message: types.Message):
    caller = message.from_user.id
    if not is_admin(caller):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del_user <user_id>")
        return
    try:
        target = int(parts[1])
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π user_id")
        return
    remove_user(target)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —É–¥–∞–ª—ë–Ω (–∏–º—è, –∑–∞–∫–∞–∑—ã, —Ä–æ–ª–∏).")

@dp.message(Command("rename_user"))
async def rename_user_cmd(message: types.Message):
    caller = message.from_user.id
    if not is_admin(caller):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rename_user <user_id> <–Ω–æ–≤–æ–µ_–∏–º—è>")
        return
    try:
        target = int(parts[1])
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π user_id")
        return
    new_name = parts[2].strip()
    set_username(target, new_name)
    await message.answer(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")

@dp.message(Command("list_users"))
async def list_users_cmd(message: types.Message):
    caller = message.from_user.id
    if not is_admin(caller):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    data = load_data()
    users = data.get("users", {})
    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    lines = []
    for uid_str, name in users.items():
        uid = int(uid_str)
        flag = "‚≠ê" if uid in data.get("admins", []) else ""
        lines.append(f"{uid}: {name} {flag}")
    await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "\n".join(lines))

# ========== PASSWORD & BLACKLIST ADMIN ==========
@dp.message(Command("password_set"))
async def password_set_cmd(message: types.Message):
    caller = message.from_user.id
    if not is_admin(caller):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å.")
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /password_set <password> (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —É–¥–∞–ª–∏—Ç –ø–∞—Ä–æ–ª—å)")
        return
    new_pwd = parts[1].strip()
    if new_pwd == "":
        set_auth_password(None)
        await message.answer("–ü–∞—Ä–æ–ª—å —É–¥–∞–ª—ë–Ω. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞ –¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–æ–ª—è.")
    else:
        set_auth_password(new_pwd)
        await message.answer("–ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

@dp.message(Command("password"))
async def password_cmd(message: types.Message):
    caller = message.from_user.id
    if not is_admin(caller):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å.")
        return
    pwd = get_auth_password()
    if not pwd:
        await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ –∑–∞–¥–∞–Ω.")
    else:
        # show masked but allow admin to view full if wants
        masked = pwd[0] + "*"*(len(pwd)-1) if len(pwd) > 1 else "*"
        await message.answer(f"–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å (–º–∞—Å–∫–∞): {masked}\n(–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç /password_set —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å)")

@dp.message(Command("users_blacklist"))
async def users_blacklist_cmd(message: types.Message):
    caller = message.from_user.id
    if not is_admin(caller):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    data = load_data()
    bl = data.get("blacklist", [])
    if not bl:
        await message.answer("–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return
    lines = []
    for uid in bl:
        name = data.get("users", {}).get(str(uid), "")
        lines.append(f"{uid} ‚Äî {name}")
    await message.answer("–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n" + "\n".join(lines))

@dp.message(Command("users_remove_blacklist"))
async def users_remove_blacklist_cmd(message: types.Message):
    caller = message.from_user.id
    if not is_admin(caller):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /users_remove_blacklist <user_id>")
        return
    try:
        target = int(parts[1])
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π user_id")
        return
    remove_from_blacklist(target)
    reset_attempts(target)
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —É–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ –±—ã–ª).")

# ========== HELP ==========

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    """
    /help ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É. –î–ª—è –∞–¥–º–∏–Ω–æ–≤ ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
    """
    uid = message.from_user.id

    user_help = (
        "üìò –ü–æ–º–æ—â—å ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å / –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–≤–≤–µ—Å—Ç–∏ –∏–º—è –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)\n"
        "–ö–Ω–æ–ø–∫–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ: ¬´–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é üçî¬ª ‚Äî –æ—Ç–∫—Ä—ã—Ç—å WebApp —Å –º–µ–Ω—é\n\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –≤ WebApp –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–∫–∞–∑–∞—Ç—å¬ª ‚Äî –±–æ—Ç –ø–æ–ª—É—á–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        "/my_current ‚Äî –ú–æ–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã (–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)\n"
        "/my_past ‚Äî –ú–æ–∏ –ø—Ä–æ—à–ª—ã–µ (–∞—Ä—Ö–∏–≤–Ω—ã–µ) –∑–∞–∫–∞–∑—ã (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)\n\n"
        "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:\n"
        "- –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É –≤–∞—Å –µ—Å—Ç—å 3 –ø–æ–ø—ã—Ç–∫–∏ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å. –ü–æ—Å–ª–µ 3 –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥—ë—Ç–µ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.\n"
        "- –ï—Å–ª–∏ —Å–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤ –∑–∞–∫—Ä—ã—Ç, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.\n"
        "- –í–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã ‚Äî –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )

    admin_help = (
        "üîß –ü–æ–º–æ—â—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:\n\n"
        "–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø–∞—Ä–æ–ª–µ–º:\n"
        "/password_set <pwd> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —É–¥–∞–ª—è–µ—Ç –ø–∞—Ä–æ–ª—å)\n"
        "/password ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–∞—Å–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è (–ø–æ–ª–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —á–∞—Ç–µ)\n"
        "/add_admin <user_id> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "/del_admin <user_id> ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "/del_user <user_id> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º—è, –∑–∞–∫–∞–∑—ã, —Ä–æ–ª—å)\n"
        "/rename_user <user_id> <new_name> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/list_users ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (id, –∏–º—è, –æ—Ç–º–µ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n\n"
        "–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n"
        "/users_blacklist ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫\n"
        "/users_remove_blacklist <user_id> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\n\n"
        "–°–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤:\n"
        "/start_collection ‚Äî –Ω–∞—á–∞—Ç—å —Å–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤ (–≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–º–µ—Ç—è—Ç—Å—è –∫–∞–∫ –ø—Ä–æ—à–ª—ã–µ)\n"
        "/close_collection ‚Äî –∑–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤\n"
        "–ö–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ: ¬´–ù–∞—á–∞—Ç—å/–ó–∞–∫—Ä—ã—Ç—å —Å–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤ (–∞–¥–º–∏–Ω)¬ª, ¬´–í—Å–µ –∑–∞–∫–∞–∑—ã (–∞–¥–º–∏–Ω)¬ª\n\n"
        "–†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏:\n"
        "/all_orders ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¢–ï–ö–£–©–ò–ï –∑–∞–∫–∞–∑—ã (–∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)\n"
        "–í —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∑–∞–∫–∞–∑–æ–≤ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø–æ–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π (–∫–Ω–æ–ø–∫–∞ ¬´–í—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ¬ª).\n\n"
        "–ü—Ä–æ—á–µ–µ:\n"
        "- –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è —Å–±–æ—Ä–∞ –±–æ—Ç —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        "- –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ; –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (–ø–∞—Ä–æ–ª—å, —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫), –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Å—Ä–∞–∑—É.\n"
    )

    if is_admin(uid):
        await message.answer(admin_help, disable_web_page_preview=True)
    else:
        await message.answer(user_help, disable_web_page_preview=True)

# ========== START ==========

async def safe_start_polling(dp, bot, retries=5, delay=10):
    """
    –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏.
    –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É `retries` —Ä–∞–∑ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π `delay` —Å–µ–∫—É–Ω–¥.
    """
    attempt = 0
    while attempt < retries:
        try:
            logging.info(f"Polling attempt {attempt+1}/{retries}...")
            await dp.start_polling(bot)
            break  # –µ—Å–ª–∏ polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –≤—ã—Ö–æ–¥–∏–º
        except exceptions.TelegramNetworkError as e:
            attempt += 1
            logging.warning(f"Network error: {e}. –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{retries} —á–µ—Ä–µ–∑ {delay}s")
            await asyncio.sleep(delay)
        except Exception as e:
            logging.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            # –º–æ–∂–Ω–æ —Ä–µ—à–∞—Ç—å: break –∏–ª–∏ continue
            await asyncio.sleep(delay)
    else:
        logging.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.")

async def main():
    # load data into memory
    load_data()
    # start autosave loop
    asyncio.create_task(autosave_loop())
#    print("Bot starting...")
#    await dp.start_polling(bot)
    logging.info("Bot starting...")
    await safe_start_polling(dp, bot)

if __name__ == "__main__":
    asyncio.run(main())
